diff --git a/.travis.yml b/.travis.yml
index 9466d71..79a99ce 100644
--- a/.travis.yml
+++ b/.travis.yml
@@ -9,7 +9,8 @@ env:
   - PG_SUPPORTED_VERSIONS=9.6
   - PG_SUPPORTED_VERSIONS=10
   - PG_SUPPORTED_VERSIONS=11
-  - PG_SUPPORTED_VERSIONS=12 COMPONENT=12
+  - PG_SUPPORTED_VERSIONS=12
+  - PG_SUPPORTED_VERSIONS=13 COMPONENT=13
 
 language: C
 dist: xenial
diff --git a/expected/pgextwlist_2.out b/expected/pgextwlist_2.out
new file mode 100644
index 0000000..76ac3b1
--- /dev/null
+++ b/expected/pgextwlist_2.out
@@ -0,0 +1,85 @@
+CREATE ROLE mere_mortal;
+SET ROLE mere_mortal;
+SHOW extwlist.extensions;
+               extwlist.extensions               
+-------------------------------------------------
+ citext,earthdistance,pg_trgm,pg_stat_statements
+(1 row)
+
+SELECT extname FROM pg_extension ORDER BY 1;
+ extname 
+---------
+ plpgsql
+(1 row)
+
+-- pre-existing extension
+CREATE EXTENSION plpgsql;
+ERROR:  extension "plpgsql" already exists
+SELECT extname FROM pg_extension ORDER BY 1;
+ extname 
+---------
+ plpgsql
+(1 row)
+
+-- non-whitelisted extension
+CREATE EXTENSION hstore;
+ERROR:  permission denied to create extension "hstore"
+HINT:  Must have CREATE privilege on current database to create this extension.
+SELECT extname FROM pg_extension ORDER BY 1;
+ extname 
+---------
+ plpgsql
+(1 row)
+
+-- whitelisted extensions
+CREATE EXTENSION citext;
+CREATE EXTENSION pg_trgm;
+SELECT extname FROM pg_extension ORDER BY 1;
+ extname 
+---------
+ citext
+ pg_trgm
+ plpgsql
+(3 rows)
+
+-- whitelisted extension, but dependency is missing
+CREATE EXTENSION earthdistance;
+ERROR:  required extension "cube" is not installed
+HINT:  Use CREATE EXTENSION ... CASCADE to install required extensions too.
+SELECT extname FROM pg_extension ORDER BY 1;
+ extname 
+---------
+ citext
+ pg_trgm
+ plpgsql
+(3 rows)
+
+-- drop whitelisted extension
+DROP EXTENSION pg_trgm;
+SELECT extname FROM pg_extension ORDER BY 1;
+ extname 
+---------
+ citext
+ plpgsql
+(2 rows)
+
+-- drop non-whitelisted extension
+DROP EXTENSION plpgsql;
+ERROR:  must be owner of extension plpgsql
+SELECT extname FROM pg_extension ORDER BY 1;
+ extname 
+---------
+ citext
+ plpgsql
+(2 rows)
+
+-- whitelisted extension with custom after-create script
+CREATE EXTENSION pg_stat_statements;
+ERROR:  syntax error at or near "'intentional error here'"
+SELECT extname FROM pg_extension ORDER BY 1;
+ extname 
+---------
+ citext
+ plpgsql
+(2 rows)
+
diff --git a/pgextwlist.c b/pgextwlist.c
index 3600e71..6972ddc 100644
--- a/pgextwlist.c
+++ b/pgextwlist.c
@@ -90,7 +90,7 @@ void		_PG_fini(void);
 
 #define PROCESS_UTILITY_ARGS parsetree, queryString, context, \
                               params, dest, completionTag
-#else
+#elif PG_MAJOR_VERSION < 1300
 #define PROCESS_UTILITY_PROTO_ARGS PlannedStmt *pstmt,                    \
 										const char *queryString,       \
 										ProcessUtilityContext context, \
@@ -101,6 +101,17 @@ void		_PG_fini(void);
 
 #define PROCESS_UTILITY_ARGS pstmt, queryString, context, \
                               params, queryEnv, dest, completionTag
+#else
+#define PROCESS_UTILITY_PROTO_ARGS PlannedStmt *pstmt,                    \
+										const char *queryString,       \
+										ProcessUtilityContext context, \
+										ParamListInfo params,          \
+										QueryEnvironment *queryEnv,    \
+										DestReceiver *dest,            \
+										QueryCompletion *qc
+
+#define PROCESS_UTILITY_ARGS pstmt, queryString, context, \
+                              params, queryEnv, dest, qc
 #endif	/* PG_MAJOR_VERSION */
 
 #define EREPORT_EXTENSION_IS_NOT_WHITELISTED(op)						\
diff --git a/utils.c b/utils.c
index c22ab4f..6b6b589 100644
--- a/utils.c
+++ b/utils.c
@@ -54,6 +54,8 @@
 #include "utils/syscache.h"
 #if PG_MAJOR_VERSION < 1200
 #include "utils/tqual.h"
+#define table_open(r, l) heap_open(r, l)
+#define table_close(r, l) heap_close(r, l)
 #endif
 
 /*
@@ -188,7 +190,7 @@ get_extension_current_version(const char *extname)
     /*
      * Look up the extension --- it must already exist in pg_extension
      */
-	extRel = heap_open(ExtensionRelationId, AccessShareLock);
+	extRel = table_open(ExtensionRelationId, AccessShareLock);
 
 	ScanKeyInit(&key[0],
 				Anum_pg_extension_extname,
@@ -216,7 +218,7 @@ get_extension_current_version(const char *extname)
 
 	systable_endscan(extScan);
 
-	heap_close(extRel, AccessShareLock);
+	table_close(extRel, AccessShareLock);
 
 	return oldVersionName;
 }
@@ -415,7 +417,12 @@ execute_sql_string(const char *sql, const char *filename)
 										   , NULL
 #endif
 										   );
-		stmt_list = pg_plan_queries(stmt_list, 0, NULL);
+		stmt_list = pg_plan_queries(stmt_list,
+#if PG_MAJOR_VERSION >= 1300
+									sql,
+#endif
+									0,
+									NULL);
 
 		foreach(lc2, stmt_list)
 		{
